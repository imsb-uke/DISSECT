Lines = ['config = {\n', '    "experiment_folder": "/home/user/experiment",  # Path to save outputs. Default: "/home/user/experiment"\n', '\n', '    "simulation_params": { \n', '        "scdata": "/home/user/experiment/data.h5ad",  # Path to sc/snRNA-seq data, should be anndata\n', '        "n_samples": None,  # Number of samples to generate. Default (None): 1000 times the number of celltypes,\n', '        "type": "bulk", # bulk or st to simulate bulk and spatial transcriptomics respectively\n', '        "celltype_col": "celltype",  # Name of the column corresponding to cell-type labels in adata.obs\n', '        "batch_col": None,  # If more than one batches are present, name of the column corrsponding to batch labels in adata.obs\n', '        "cells_per_sample": 500,  # Number of cells to sample to generate one sample.\n', '        "downsample": None,  # If simulation_type is ST, a float is used to downsample counts. Default (None): No downsampling\n', '        "preprocess": None, # Default (None) will no preprocess\n', '        "filter": {  # Filtering of sc/snRNA-seq before simulating\n', '            "min_genes": 200,\n', '            "min_cells": 3,\n', '            "mt_cutoff": 5,\n', '            "min_expr": 0,  # in log2(1+count)\n', '        },\n', '        "concentration": None,  # Concentration parameter for dirichlet distribution\n', '        # Should be a vector of same length as the number of cell-types with non-zero values\n', '        # Higher concentrations will be favored. e.g. concentration [0.2,0.2,1] for 3 cell-types will make fractions\n', '        # of the third cell-types higher.\n', '        # Default (None): Vector of ones.\n', '        "prop_sparse": 0.5,  # Proportion of sparse samples to generate. Default: 0.5\n', '        # Sparse samples are samples in which some cell-types do not exist.\n', '        # Probabilities of cell-types to not be present in the generate sample are uniform.\n', '        "generate_component_figures": True,  # Computes PCA of celltype signatures per generated sample\n', '    },\n', '\n', '    "deconv_params": {\n', '        "test_dataset": "../bulk.txt",\n', '        "test_dataset_format": "txt",  # Either tab-delimited txt file with genes in rows or h5ad file compatible with Scanpy.\n', '        "test_dataset_type": "bulk",  # bulk or microarray. For spatial, set it to bulk as similar training procedure is used.\n', '        "duplicated": "first",  # In case, there are duplicated genes in the test_dataset. To use the first occuring gene, write first. To sum the duplicated genes, write sum. To take average, write mean\n', '        "normalize_simulated": "cpm",  # "cpm", # Only CPM and None is supported. Write CPM if not already TPM/CPM.\n', '        "normalize_test": "cpm",  # Write CPM if not already TPM/CPM\n', '        "var_cutoff": 0.1,  # variance cutoff for gene filtering\n', '        "test_in_mix": None,  # Number of test samples to use in the generation of online mixtures. Default (None) uses all samples.\n', '        "simulated": True,  # True if dataset is already simulated. False, if it is a single-cell dataset.\n', '        "sig_matrix": False, #  Whether the input is a signature matrix, i.e. a matrix of cell type by genes.\n', '        "mix": "srm", # srm (simulation-real mixture) mixes simulation and real data, and is intended for bulk and spatial RNAseq data. \n', '                      # rrm (real-real mixture) mixes real data with itself, and is intended for bulk proteome data where same preprocessing can not be established as in RNAseq. \n', '        "save_config": True,\n', '        "network_params": {\n', '            "n_hidden_layers": 4,  # Number of hidden layers\n', '            "hidden_units": [\n', '                512,\n', '                256,\n', '                128,\n', '                64,\n', '                ],  # Sizes of the hidden dense layers. The length of this list should be same as n_hidden_layers above.\n', '            "hidden_activation": "relu6",  # Activation of hidden layers. Choose ones supported in keras or relu6.\n', '            "output_activation": "softmax",  # Activation of output layer.\n', '            "loss": "kldivergence",  # Options - kldivergence, l2, l1. KL divergence will only work properly if output activation is softmax.\n', '            "n_steps": 5000,  # Number of training steps\n', '            "lr": 1e-5,  # Learning rate\n', '            "batch_size": 64,  # best - 64 # batch size\n', '            "dropout": None,  # If you would like dropoouts in the model, write a list with same number of elements as n_hidden_layers above corresponding to each dropout layer.\n', '            # An example is [0.2,0.2,0,0.3,0.1,0.2]. Default (None) is no dropout\n', '            "n_steps_expr": 5000\n', '            },  # Parameters to use to build network.\n', '        "alpha_range": [\n', '            0.1,\n', '            0.9,\n', '            ],  # Alpha parameter to create mixtures per batch is uniformly sampled between these two values\n', '        "normalization_per_batch": "log1p-MinMax",  # normalization of batches. Only per log1p-MinMax or None are supported\n', '        "models": [1, 2, 3, 4, 5],\n', '        \n', '    },\n', '}\n']
    
def config_info(Lines=Lines):
    for Line in Lines:
        print(Line)